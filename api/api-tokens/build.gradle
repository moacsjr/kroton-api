buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'docker'

sourceCompatibility = 1.8
version = '1.0'

jar {
    baseName = 'pda-api-tokens'
    version =  '0.1.0'
    manifest {
        attributes 'Implementation-Title': 'Kroton API Microservice',
                   'Implementation-Version': version
    }
}


repositories {
    jcenter()
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}

dependencies {
	compile "org.springframework.boot:spring-boot-starter-web" 
	compile "org.springframework.boot:spring-boot-starter-undertow:1.3.5.RELEASE"
	compile "org.mybatis.spring.boot:mybatis-spring-boot-starter:1.1.1"
	compile "commons-codec:commons-codec:1.10"
	compile "org.reflections:reflections:0.9.9"
	compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.6.0'
	compile "joda-time:joda-time:2.9.4"
	compile "commons-collections:commons-collections:3.2"
	compile files("libs/KHUBJavaCriptografador.jar", "libs/KHUBJavaUtil.jar")
	compile files("libs/ojdbc7.jar", "libs/ojdbc7.jar")
    testCompile "junit:junit:4.+"
}

test {
    systemProperties 'property': 'value'
}

tasks.withType(JavaExec) {
    standardInput = System.in
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

eclipse {
    project {
        natures += 'org.springframework.ide.eclipse.core.springnature'
    }
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

task buildDocker(type: Docker, dependsOn: build) {
  push = false
  applicationName = jar.baseName
  dockerfile = file('Dockerfile')
  doFirst {
    copy {
      from jar
      into stageDir
    }
  }
}
